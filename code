import javax.swing.*;
import java.awt.*;         
import java.awt.event.*;
public class TicTacToe implements ActionListener {
private JFrame frame;
private JPanel panel;
private JButton[][] buttons = new JButton[3][3]; // 2D array for buttons
private String[][] board = new String[3][3]; // 2D array for game state
private boolean xTurn = true;
public TicTacToe() {
    frame = new JFrame("Tic-Tac-Toe");
    frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
    panel = new JPanel();
    panel.setLayout(new GridLayout(3, 3));
    panel.setBorder(BorderFactory.createEmptyBorder(10, 10, 10, 10));
    for (int i = 0; i < 3; i++) {
        for (int j = 0; j < 3; j++) {
            buttons[i][j] = new JButton();
            buttons[i][j].setFont(new Font("Arial", Font.PLAIN, 40));
            buttons[i][j].addActionListener(this);
            panel.add(buttons[i][j]);
            board[i][j] = ""; 
        }
    }
    frame.add(panel, BorderLayout.CENTER);
    frame.setSize(400, 400);
    frame.setVisible(true);
}
public void actionPerformed(ActionEvent e) {
    JButton button = (JButton) e.getSource();
    int row = -1, col = -1;
    // Find the button's position
    for (int i = 0; i < 3; i++) {
        for (int j = 0; j < 3; j++) {
            if (buttons[i][j] == button) {
                row = i;
                col = j;
            }
        }
    }
    // Update the button and board state
    if (xTurn) {
        button.setText("X");
        board[row][col] = "X";
    } else {
        button.setText("O");
        board[row][col] = "O";
    }
    button.setEnabled(false);
    xTurn = !xTurn;
    checkForWinner();
}
public void checkForWinner() {
    // Check for a winner using the board array
    for (int i = 0; i < 3; i++) {
        // Check rows
        if (!board[i][0].isEmpty() && board[i][0].equals(board[i][1]) && board[i][0].equals(board[i][2])) {
            JOptionPane.showMessageDialog(frame, board[i][0] + " wins!");
            resetGame();
            return;
        }
        // Check columns
        if (!board[0][i].isEmpty() && board[0][i].equals(board[1][i]) && board[0][i].equals(board[2][i])) {
            JOptionPane.showMessageDialog(frame, board[0][i] + " wins!");
            resetGame();
            return;
        }
    }
    // Check diagonals
    if (!board[1][1].isEmpty()) {
        if (board[0][0].equals(board[1][1]) && board[0][0].equals(board[2][2])) {
            JOptionPane.showMessageDialog(frame, board[1][1] + " wins!");
            resetGame();
            return;
        }
        if (board[0][2].equals(board[1][1]) && board[0][2].equals(board[2][0])) {
            JOptionPane.showMessageDialog(frame, board[1][1] + " wins!");
            resetGame();
            return;
        }
    }
    // Check for tie
    boolean tie = true;
    for (int i = 0; i < 3; i++) {
        for (int j = 0; j < 3; j++) {
            if (board[i][j].isEmpty()) {
                tie = false;
                break;
            }
        }
    }
    if (tie) {
        JOptionPane.showMessageDialog(frame, "Tie game!");
        resetGame();
    }
}
public void resetGame() {
    for (int i = 0; i < 3; i++) {
        for (int j = 0; j < 3; j++) {
            buttons[i][j].setText("");
            buttons[i][j].setEnabled(true);
            board[i][j] = ""; // Reset the board state
        }
    }
    xTurn = true;
}
public static void main(String[] args) {
    new TicTacToe();
}
